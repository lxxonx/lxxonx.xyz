<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lxxonx.xyz</title><link>/</link><description>Recent content on lxxonx.xyz</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 11 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Javascript stdin</title><link>/snippet/javascript/stdin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/snippet/javascript/stdin/</guid><description>// 줄바꿈으로 구분된 문자열 처리 const input = require(&amp;#34;fs&amp;#34;) .readFileSync(&amp;#34;/dev/stdin&amp;#34;, &amp;#34;utf8&amp;#34;) .toString() .trim() .split(&amp;#34;\n&amp;#34;); // .split(&amp;#34; &amp;#34;); // 공백으로 구분된 문자열 처리 // 줄바꿈으로 구분된 숫자 처리 const input = require(&amp;#34;fs&amp;#34;) .readFileSync(&amp;#34;/dev/stdin&amp;#34;, &amp;#34;utf8&amp;#34;) .toString() .trim() .split(&amp;#34;\n&amp;#34;) // .split(&amp;#34; &amp;#34;); // 공백으로 구분된 숫자 처리 .map(Number);</description></item><item><title>Python stdin</title><link>/snippet/python/stdin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/snippet/python/stdin/</guid><description>str = input() import sys input = sys.stdin.readline str = input()</description></item><item><title>Rust stdin</title><link>/snippet/rust/stdin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/snippet/rust/stdin/</guid><description>// #![allow(unused)] mod util { // IO handlers and Parsers #![allow(dead_code)] use std::io::BufRead; use std::str::FromStr; pub fn generate_input() -&amp;gt; impl FnMut() -&amp;gt; String { let mut lock = std::io::stdin().lock(); move || { let mut buf = String::new(); lock.read_line(&amp;amp;mut buf).unwrap(); // Option 1. trim every trailing white spaces. buf.truncate(buf.trim_end().len()); // Option 2. trim only line feed characters // buf.truncate(buf.trim_end_matches(&amp;#34;\r\n&amp;#34;).trim_end_matches(&amp;#39;\n&amp;#39;).len()); buf } } pub fn split_parse&amp;lt;T: FromStr&amp;gt;(s: &amp;amp;str) -&amp;gt; impl Iterator&amp;lt;Item = T&amp;gt; + &amp;#39;_ { s.</description></item><item><title>Javascript GCD</title><link>/snippet/javascript/gcd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/snippet/javascript/gcd/</guid><description>const gcd = (a, b) =&amp;gt; (b &amp;gt; 0 ? gcd(b, a % b) : a);</description></item><item><title>Rust GCD</title><link>/snippet/rust/gcd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/snippet/rust/gcd/</guid><description>fn gcd(mut a: u32, mut b: u32) -&amp;gt; u32 { while b != 0 { let remainder = a % b; a = b; b = remainder; } a }</description></item><item><title>Javascript LCM</title><link>/snippet/javascript/lcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/snippet/javascript/lcm/</guid><description>const lcm = (a, b) =&amp;gt; (a * b) / gcd(a, b);</description></item><item><title>Helm Chart 구성요소</title><link>/blog/helm-chart-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><guid>/blog/helm-chart-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C/</guid><description>Helm Chart 구성요소</description></item><item><title>Javascript Prototype</title><link>/blog/javascript-prototype/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>/blog/javascript-prototype/</guid><description>자바스크립트의 프토로타입과 상속에 관하여</description></item><item><title>forEach와 map의 차이점</title><link>/blog/foreach%EC%99%80-map%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90/</link><pubDate>Fri, 19 Aug 2022 00:00:00 +0000</pubDate><guid>/blog/foreach%EC%99%80-map%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90/</guid><description>Javascript의 배열 iterator인 forEach와 Map메소드의 차이점</description></item><item><title>HTML basic questions</title><link>/blog/html-basic-questions/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate><guid>/blog/html-basic-questions/</guid><description>HTML5 Interview Questions</description></item><item><title>DFS</title><link>/snippet/go/dfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/snippet/go/dfs/</guid><description>const solution = (arr, rootNode) =&amp;gt; { const visited = new Array(arr.length).fill(false); const result = []; const dfs = (node) =&amp;gt; { if (visited[node]) { return; } visited[node] = true; result.push(node); path[node].forEach((n) =&amp;gt; { if (!visited[n]) { dfs(n); } }); }; dfs(rootNode); return result; };</description></item></channel></rss>