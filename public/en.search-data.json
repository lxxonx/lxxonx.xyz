{"/about/":{"data":{"":"","bio#Bio":" Major in Business, Minor in Computer Science. I love to work with people and solve problems. When other teams are having trouble with their work, I like to help them out and solve the problem together. I also like to work with people who are better than me. I think it's a great opportunity to learn from them and improve myself. I'd like to work efficiently and effectively. I have set up an automated deployment system using Ansible and Terraform to reduce the time it takes to deploy a server. I also have experience in building a CI/CD system using Github Actions and AWS CodeDeploy. ","skill#Skill":"Javascript / Typescript Understand the basic concepts of Javascript Used Frameworks NodeJS/Express/NestJS React/NextJS/Vue/Svelte Prisma/TypeORM Blog Posts / Javascript Projects / Typescript Projects Go Understand pros and cons of Go Able to solve algorithm problems using Go1 Go Projects Python Able to create api server using Frameworks like Django, Fastapi DevOps Capable to use Docker, Docker-compose, Kubernetes CI/CD using Github Actions, AWS CodeDeploy Automated deployment using Ansible, Terraform advent of code\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},"title":"About"},"/blog/foreach%EC%99%80-map%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90/":{"data":{"":"","tldr#TL;DR":" forEach: return 값 없음 map: 재가공된 함수를 리턴 ","설명#설명":"자바스크립트에는 Array클래스에 내장되어 있는 대표적인 iterator 매소드가 두가지 있다. 첫번째는 forEach메소드이며 두번째는 map메소드이다. 두 메소드의 차이점을 지금부터 알아보자\nforEach메소드 가장 기본적인 Array Iterator 메소드이다. Array의 각 엘리먼트들을 돌아가면서 주어진 함수를 실행한다. 중요한 부분은 forEach에는 반환 값이 존재하지 않는다.\nmap메소드 forEach와 마찬가지로 기본적으로 Array의 각 엘리먼트들을 돌아가면서 주어진 함수를 수행한다. 하지만, forEach메소드와는 다르게, map메소드는 주어진 함수들의 반환값들을 배열로 묶어서 반환한다. 즉, 주어진 함수로 재가공된 배열을 반환한다.\nReference JavaScript map vs. forEach: When to Use Each One "},"title":"forEach와 map의 차이점"},"/blog/helm-chart-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C/":{"data":{"":"","#":"Chart.yaml: Helm Char 설정정보 + 메타데이터 이름, 버전, 설명, 라이센스 등\ntemplates: 디렉토리 형태로 존재 values.yaml 과 결합될 때, 유효한 menifest 파일이 생성됨 service, configMap, etc\nvalues.yaml: templates의 params + 설정\nreference helm doc "},"title":"Helm Chart 구성요소"},"/blog/html-basic-questions/":{"data":{"":"","html-interview-questions#HTML Interview Questions":"What are semantic tags in HTML5? header, footer, article, aside, details, figcaption, figure, main, nav, section, mark, summary, tima why use semantic tags easier to read greater accessibility ref: Semantic HTML5 Elements Explained How HTML5 doctype is different from normal html doctype? HTML5에서는 오직 \u0026lt;!DOCTYPE html\u0026gt;만 사용가능 ref: HTML \u0026lt;!DOCTYPE\u0026gt; 선언 How many heading tags are there in HTML5? h1, h2, h3, h4, h5, h6 ref: HTML5 Headings Where should script tag be placed in html? head tag with async or defer attribute ref: Where should I put \u0026lt;script\u0026gt; tags in HTML markup? What is the difference between figure and image tag? figure tag is used to group a figure with a caption ref: HTML Figure Tag How section tag is different from div tag section tag: the content inside is grouped and should appear as a entry in an outline of a page div tag: does not convey any meaning, aside from any found in its class, lang and title attributes. ref: HTML Section Tag Difference between class and id attribute class: used to group elements with similar styles id: used to identify an element ref: HTML Class and ID Attribute What is the difference between canvas and svg? canvas: used to draw graphics svg: used to draw graphics ref: Canvas vs SVG What you need to add in a html document to make page responsive? meta tag ref: HTML Meta Tag 1### List some of media tags available in HTML5 audio, video, source, track ref: HTML5 Media Tags Explain new Form input types in HTML5 date: It allows the user to select a date from a drop-down calendar. DateTime: It allows the user to select a date and time along with time zone time: It allows the user to enter time. DateTime-local: It allows the user to select a local date and time week: It allows the user to select a week and year from a drop-down calendar. month: It allows the user to select a month and year from a drop-down calendar. email: It allows the user to enter an e-mail address. tel: It allows the user to enter the phone number with a specific pattern. URL: It allows the user to enter a website URL search: It\u0026rsquo;s a text field for entering a search string range: It allows the user to range the value with the slider. number: It allows the user to enter a numeric value with the increase and decrease arrow. color: It allows the user to select a color from the color picker ref: HTML5 Form Input Types What is image map in HTML5? The HTML \u0026lt;map\u0026gt; tag defines an image map. An image map is an image with clickable areas. The areas are defined with one or more \u0026lt;area\u0026gt; tags. ref: HTML Image Map Difference between \u0026lt;b\u0026gt; and \u0026lt;strong\u0026gt; tag \u0026lt;b\u0026gt;:The bold tag or \u0026lt;b\u0026gt; is also one of the formatting elements of HTML. The text written under \u0026lt;b\u0026gt; tag makes the text bold presentationally to draw attention. \u0026lt;strong\u0026gt;: The strong tag is one of the element of HTML used in formatting HTML texts. It is used to show importance of the text by making it bold or highlighting it semantically. The main difference between these two tag is that the strong tag semantically emphasizes on the important word or section of words while the bold tag is just offset text conventionally styled in bold. ref: Difference between strong and bold tag in HTML What are the various formatting tags in HTML5? \u0026lt;b\u0026gt; - Bold text \u0026lt;strong\u0026gt; - Important text \u0026lt;i\u0026gt; - Italic text \u0026lt;em\u0026gt; - Emphasized text \u0026lt;mark\u0026gt; - Marked text \u0026lt;small\u0026gt; - Smaller text \u0026lt;del\u0026gt; - Deleted text \u0026lt;ins\u0026gt; - Inserted text \u0026lt;sub\u0026gt; - Subscript text \u0026lt;sup\u0026gt; - Superscript text ref: HTML Formatting Tags Explain the concept of web storage in HTML5 With web storage, web applications can store data locally within the user\u0026rsquo;s browser.\nBefore HTML5, application data had to be stored in cookies, included in every server request. Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance. Unlike cookies, the storage limit is far larger (at least 5MB) and information is never transferred to the server.\nWeb storage is per origin (per domain and protocol). All pages, from one origin, can store and access the same data.\nref: HTML Web Storage API\nExplain Meta tags The \u0026lt;meta\u0026gt; tag defines metadata about an HTML document. Metadata is data (information) about data. \u0026lt;meta\u0026gt; tags always go inside the \u0026lt;head\u0026gt; element, and are typically used to specify character set, page description, keywords, author of the document, and viewport settings. Metadata will not be displayed on the page, but is machine parsable. Metadata is used by browsers (how to display content or reload page), search engines (keywords), and other web services. There is a method to let web designers take control over the viewport (the user\u0026rsquo;s visible area of a web page), through the \u0026lt;meta\u0026gt; tag (See \u0026ldquo;Setting The Viewport\u0026rdquo; example below). ref: HTML Meta Tags Explain the \u0026lt;base\u0026gt; tag The \u0026lt;base\u0026gt; tag specifies the base URL to use for all relative URLs in a document. ref: HTML Base Tag What are the frequently useful API in HTML5? ref: APIs in HTML5 What are inline elements and block level elements in HTML5? ref: HTML Block and Inline Elements "},"title":"HTML basic questions"},"/blog/javascript-prototype/":{"data":{"":"","prototype#Prototype":" every object in js has (at least) a prototype which has properties and methods var date = new Date(); // Date.prototype \u0026amp;\u0026amp; Object.prototype when a function is declared, it can be a constructor for an object using \u0026ldquo;new\u0026rdquo; keyword in front of it also, Prototype Object is created for the function and we can access to the Ojbect using \u0026ldquo;prototype\u0026rdquo; property of the function Prototype Object has constructor and __proto__(Prototype Link) property __proto__(Prototype Link) points to the ancestor\u0026rsquo;s Prototype Object ","prototype-based-object-oriented-language#Prototype-based Object oriented language":" javascript is, different from java/c#(class-based ool), a prototype-based object oriented language js uses prototype to implement inheritance ","reference#reference":" 프로토타입 [Javascript] 프로토타입 이해하기 "},"title":"Javascript Prototype"},"/snippet/go/dfs/":{"data":{"":"const solution = (arr, rootNode) =\u0026gt; { const visited = new Array(arr.length).fill(false); const result = []; const dfs = (node) =\u0026gt; { if (visited[node]) { return; } visited[node] = true; result.push(node); path[node].forEach((n) =\u0026gt; { if (!visited[n]) { dfs(n); } }); }; dfs(rootNode); return result; }; "},"title":"DFS"},"/snippet/javascript/gcd/":{"data":{"":"const gcd = (a, b) =\u0026gt; (b \u0026gt; 0 ? gcd(b, a % b) : a); "},"title":"GCD"},"/snippet/javascript/lcm/":{"data":{"":"const lcm = (a, b) =\u0026gt; (a * b) / gcd(a, b); "},"title":"LCM"},"/snippet/javascript/stdin/":{"data":{"":"// 줄바꿈으로 구분된 문자열 처리 const input = require(\u0026#34;fs\u0026#34;) .readFileSync(\u0026#34;/dev/stdin\u0026#34;, \u0026#34;utf8\u0026#34;) .toString() .trim() .split(\u0026#34;\\n\u0026#34;); // .split(\u0026#34; \u0026#34;); // 공백으로 구분된 문자열 처리 // 줄바꿈으로 구분된 숫자 처리 const input = require(\u0026#34;fs\u0026#34;) .readFileSync(\u0026#34;/dev/stdin\u0026#34;, \u0026#34;utf8\u0026#34;) .toString() .trim() .split(\u0026#34;\\n\u0026#34;) // .split(\u0026#34; \u0026#34;); // 공백으로 구분된 숫자 처리 .map(Number); "},"title":"stdin"},"/snippet/python/stdin/":{"data":{"":"str = input() import sys input = sys.stdin.readline str = input() "},"title":"stdin"},"/snippet/rust/gcd/":{"data":{"":"fn gcd(mut a: u32, mut b: u32) -\u0026gt; u32 { while b != 0 { let remainder = a % b; a = b; b = remainder; } a } "},"title":"GCD"},"/snippet/rust/stdin/":{"data":{"":"// #![allow(unused)] mod util { // IO handlers and Parsers #![allow(dead_code)] use std::io::BufRead; use std::str::FromStr; pub fn generate_input() -\u0026gt; impl FnMut() -\u0026gt; String { let mut lock = std::io::stdin().lock(); move || { let mut buf = String::new(); lock.read_line(\u0026amp;mut buf).unwrap(); // Option 1. trim every trailing white spaces. buf.truncate(buf.trim_end().len()); // Option 2. trim only line feed characters // buf.truncate(buf.trim_end_matches(\u0026#34;\\r\\n\u0026#34;).trim_end_matches(\u0026#39;\\n\u0026#39;).len()); buf } } pub fn split_parse\u0026lt;T: FromStr\u0026gt;(s: \u0026amp;str) -\u0026gt; impl Iterator\u0026lt;Item = T\u0026gt; + \u0026#39;_ { s.split(\u0026#39; \u0026#39;).map(|w| w.parse::\u0026lt;T\u0026gt;().ok().unwrap()) } pub fn into_vec\u0026lt;T: FromStr\u0026gt;(s: \u0026amp;str) -\u0026gt; Vec\u0026lt;T\u0026gt; { split_parse::\u0026lt;T\u0026gt;(s).collect() } pub fn isize(s: \u0026amp;str) -\u0026gt; isize { s.parse().unwrap() } pub fn usize(s: \u0026amp;str) -\u0026gt; usize { s.parse().unwrap() } pub fn parse\u0026lt;T: FromStr\u0026gt;(s: \u0026amp;str) -\u0026gt; T { s.parse().ok().unwrap() } pub fn take_two\u0026lt;T: FromStr\u0026gt;(s: \u0026amp;str) -\u0026gt; (T, T) { let mut it = split_parse::\u0026lt;T\u0026gt;(s); let mut get = move || it.next().unwrap(); (get(), get()) } pub fn take_three\u0026lt;T: FromStr\u0026gt;(s: \u0026amp;str) -\u0026gt; (T, T, T) { let mut it = split_parse::\u0026lt;T\u0026gt;(s); let mut get = move || it.next().unwrap(); (get(), get(), get()) } } "},"title":"stdin"}}